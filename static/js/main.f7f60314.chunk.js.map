{"version":3,"sources":["store/actions/actions.js","store/reducers/currentReducer.js","store/reducers/forecastReducer.js","store/reducers/searchReducer.js","components/Navigation/Navigation.js","containers/Search/Search.js","components/weatherTitle/weatherTitle.js","components/CurrentWeatherOutput/CurrentWeatherOutput.js","containers/CurrentWeather/CurrentWeather.js","components/ForecastOutput/ForecastOutput.js","containers/Forecast/Forecast.js","containers/HomeGrid/HomeGrid.js","containers/Favorites/Favorites.js","Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["token","formatToCityAndKeyArray","arr","i","autoSuggestionArray","forEach","element","cities","name","key","LocalizedName","Key","type","autoSuggestion","getCurretWeather","cityName","dispatch","axios","get","then","response","loadCurrentWeather","data","WeatherIcon","Temperature","Metric","Value","WeatherText","currentIcon","currentTemperature","currentWeatherText","currentCity","currentKey","iconUrl","weatherIcon","temperature","weatherText","city","getForecast","loadForecast","DailyForecasts","new5Days","days","initialState","reducer","state","arguments","length","undefined","action","Object","objectSpread","navigation","react_default","a","createElement","className","style","fontSize","margin","display","react_router_dom","to","exact","Search","value","onChange","event","_ref","newValue","_this","setState","onSuggestionsFetchRequested","_ref2","props","onInputChange","_this2","this","inputProps","placeholder","dist_default","suggestions","getSuggestionValue","suggestion","onSearchCurrent","onSearchForcast","renderSuggestion","Component","connect","search","char","actionCreators","current","currentWeatherOutput","src","iconValue","alt","tempValue","cityValue","CurrentWeather","CurrentWeatherOutput","icon","temp","forecastOutput","dayValue","maxValue","minValue","Forecast","nextDays","push","ForecastOutput","Date","slice","Minimum","Maximum","forecast","HomeGrid","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isFavorite","addToFavorites","bind","assertThisInitialized","removeFromFavorites","currentWeather","favs","JSON","parse","localStorage","getItem","fav","_","find","prev","setItem","stringify","e","alert","filter","item","containers_Search_Search","containers_CurrentWeather_CurrentWeather","onClick","components_weatherTitle_weatherTitle","height","containers_Forecast_Forecast","Favorites","favorites","redirect","updateCurrent","onChangeCurrent","onChangeForcast","_this$state","react_router","map","el","width","cursor","layout","Navigation","path","component","App","Layout","Boolean","window","location","hostname","match","rootReducer","combineReducers","currentReducer","forecastReducer","searchReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","next","console","log","result","getState","thunk","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f7f60314.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const GET_SUGGESTIONS = 'GET_SUGGESTIONS';\r\nexport const GET_CURRENT = 'GET_CURRENT';\r\nexport const  GET_FORECAST = ' GET_FORECAST';\r\n\r\nvar token = \"Cb9DU3AU3pX2O3hJkUNLjJURtS6io4ct\";\r\n\r\nexport const getSuggestions = (char) => {\r\n  return dispatch => {\r\n    return axios.get(\"https://dataservice.accuweather.com/locations/v1/cities/autocomplete?q=\" + char + \"&apikey=\" + token)\r\n      .then(response => {\r\n        dispatch(formatToCityAndKeyArray(response.data))\r\n      });\r\n  }\r\n};\r\n\r\nexport const formatToCityAndKeyArray = (arr) => {\r\n  let i = 0;\r\n  const autoSuggestionArray = [];\r\n  arr.forEach((element) => {\r\n    let cities = {\r\n      name: \" \",\r\n      key: \" \"\r\n    };\r\n    cities.name = element.LocalizedName;\r\n    cities.key = element.Key;\r\n    autoSuggestionArray[i] = cities;\r\n    i++;\r\n  });\r\n  return {\r\n    type: GET_SUGGESTIONS,\r\n    autoSuggestion: autoSuggestionArray\r\n  };\r\n};\r\n\r\nexport const getCurretWeather = (cityName, key) => {\r\n  return dispatch => {\r\n    return axios.get(\"https://dataservice.accuweather.com/currentconditions/v1/\" + key + \"?apikey=\" + token)\r\n      .then(response => {\r\n        dispatch(loadCurrentWeather(response.data[0].WeatherIcon,\r\n          response.data[0].Temperature.Metric.Value,\r\n          response.data[0].WeatherText,\r\n          cityName,\r\n          key))\r\n      });\r\n  }\r\n};\r\n\r\nexport const loadCurrentWeather = (currentIcon, currentTemperature, currentWeatherText, currentCity, currentKey) => {\r\n  if (currentIcon < 10) {\r\n    var iconUrl = \"https://developer.accuweather.com/sites/default/files/0\" + currentIcon + \"-s.png\";\r\n  } else {\r\n    var iconUrl = \"https://developer.accuweather.com/sites/default/files/\" + currentIcon + \"-s.png\";\r\n  }\r\n  return {\r\n    type: GET_CURRENT,\r\n    weatherIcon: iconUrl,\r\n    temperature: currentTemperature,\r\n    weatherText: currentWeatherText,\r\n    city: currentCity,\r\n    key: currentKey\r\n  };\r\n};\r\n\r\nexport const getForecast = (key) => {\r\n  return dispatch => {\r\n    return axios.get(\"https://dataservice.accuweather.com/forecasts/v1/daily/5day/\" + key + \"?apikey=\" + token + \"&metric=true\")\r\n      .then(response => {\r\n        dispatch(loadForecast(response.data.DailyForecasts))\r\n      });\r\n  }\r\n};\r\n\r\nexport const loadForecast = (new5Days) => {\r\n  return {\r\n    type: GET_FORECAST,\r\n    days: new5Days // array of 5 days\r\n  };\r\n};\r\n","import * as actionTypes from '../actions/actions';\r\n\r\nconst initialState = {\r\n  weatherIcon: '',\r\n  temperature: '',\r\n  weatherText: '',\r\n  city: 'Tel-Aviv',\r\n  key: '215854'\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.GET_CURRENT:\r\n      return {\r\n        ...state,\r\n          weatherIcon: action.weatherIcon,\r\n          temperature: action.temperature + ' C',\r\n          weatherText: action.weatherText,\r\n          city: action.city,\r\n          key: action.key\r\n      }\r\n  }\r\n  return state;\r\n};\r\n\r\nexport default reducer;\r\n","import * as actionTypes from '../actions/actions';\r\n\r\nconst initialState = {\r\n  days: []\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.GET_FORECAST:\r\n      return {\r\n        ...state,\r\n        days: action.days\r\n      }\r\n  }\r\n  return state;\r\n};\r\n\r\nexport default reducer;\r\n","import * as actionTypes from '../actions/actions';\r\n\r\nconst initialState = {\r\n  autoSuggestion: []\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.GET_SUGGESTIONS:\r\n      return {\r\n        ...state,\r\n        autoSuggestion: action.autoSuggestion\r\n      }\r\n  }\r\n  return state;\r\n};\r\n\r\nexport default reducer;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './Logo.css';\r\n\r\nconst navigation = () => (\r\n\r\n        <nav className=\"navbar navbar-light bg-light justify-content-xs-center\">\r\n          <p className=\"Logo\">LOGO</p>\r\n            <ul className=\"p-0\">\r\n                <li style={{fontSize: '20px', margin: '10px', display: 'inline-block'}}>\r\n                  <NavLink to=\"/\" exact >Home</NavLink>\r\n                </li>\r\n                <li style={{fontSize: '20px', margin: '10px', display: 'inline-block'}}>\r\n                  <NavLink to=\"/favorites\" >Favorites</NavLink>\r\n                </li>\r\n            </ul>\r\n\r\n        </nav>\r\n\r\n\r\n);\r\n\r\nexport default navigation;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actionCreators from '../../store/actions/actions';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport themeable from 'react-themeable';\r\nimport './search.css';\r\n\r\nclass Search extends Component  {\r\n  state = {\r\n        value: ''\r\n      }\r\n\r\n  onChange = (event, { newValue }) => {\r\n  this.setState({\r\n    value: newValue\r\n  });\r\n};\r\n\r\n  onSuggestionsFetchRequested = ({ value }) => {\r\n  this.props.onInputChange(value)\r\n};\r\n\r\n render () {\r\n   const { value } = this.state;\r\n\r\n   const {autoSuggestion} = this.props;\r\n\r\n   const getSuggestionValue = (suggestion) => {\r\n     this.props.onSearchCurrent(suggestion.name,suggestion.key)\r\n     this.props.onSearchForcast(suggestion.key)\r\n     return suggestion.name\r\n   }\r\n\r\n   const renderSuggestion = suggestion => (\r\n     <div>\r\n       {suggestion.name}\r\n     </div>\r\n   );\r\n\r\n   const inputProps = {\r\n   placeholder: 'Search City',\r\n   value,\r\n   onChange: this.onChange\r\n   };\r\n    return (\r\n      <div className=\"search-cont\">\r\n          <Autosuggest\r\n            suggestions={autoSuggestion}\r\n            onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n            getSuggestionValue={getSuggestionValue}\r\n            renderSuggestion={renderSuggestion}\r\n            inputProps={inputProps}\r\n          />\r\n      </div>\r\n    );\r\n }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        autoSuggestion: state.search.autoSuggestion\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onInputChange: (char) => dispatch(actionCreators.getSuggestions(char)),\r\n        onSearchCurrent: (cityName,key) => dispatch(actionCreators.getCurretWeather(cityName,key)),\r\n        onSearchForcast: (key) => dispatch(actionCreators.getForecast(key))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actionCreators from '../../store/actions/actions';\r\n\r\nconst weatherTitle = (props) =>{\r\n      return (\r\n            <div className=\"col-12 my-4 text-center\">\r\n                   <h1>{props.weatherText}</h1>\r\n            </div>\r\n      );\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        weatherText: state.current.weatherText\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(weatherTitle);\r\n","import React from 'react';\r\n\r\nconst currentWeatherOutput = (props) =>{\r\n\r\n      return (\r\n            <div className=\"col-4\">\r\n              <img src={props.iconValue} alt=\"icon\" />\r\n              <h5>{props.tempValue}</h5>\r\n              <h5>{props.cityValue}</h5>\r\n            </div>\r\n      );\r\n}\r\n\r\nexport default currentWeatherOutput;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CurrentWeatherOutput from '../../components/CurrentWeatherOutput/CurrentWeatherOutput';\r\n\r\nclass CurrentWeather extends Component {\r\n\r\n  render() {\r\n     return (\r\n         <CurrentWeatherOutput\r\n                iconValue={this.props.icon}\r\n                tempValue={this.props.temp}\r\n                cityValue={this.props.city}/>\r\n     );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n      icon: state.current.weatherIcon,\r\n      temp: state.current.temperature,\r\n      city: state.current.city\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps)(CurrentWeather);\r\n","import React from 'react';\r\n\r\nconst forecastOutput = (props) =>{\r\n\r\n      return (\r\n            <div className=\"col-12 col-md-2 justify-content-center\">\r\n              <div className=\"card bg-light mb-3 justify-content-center\">\r\n                <h6 className=\"card-header text-center\">{props.dayValue}</h6>\r\n                  <div className=\"card-body\">\r\n                   <p className=\"card-text text-center\">Max: {props.maxValue} C</p>\r\n                   <p className=\"card-text text-center\">Min: {props.minValue} C</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n      );\r\n}\r\n\r\nexport default forecastOutput;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ForecastOutput from '../../components/ForecastOutput/ForecastOutput';\r\n\r\nclass Forecast extends Component {\r\n\r\n  render() {\r\n    if (this.props.days.length !== 0) {\r\n         var nextDays = [];\r\n         for (var i = 0; i < 5; i++) {\r\n         nextDays.push(<ForecastOutput\r\n                        dayValue={this.props.days[i].Date.slice(5,10)}\r\n                        minValue={this.props.days[i].Temperature.Minimum.Value}\r\n                        maxValue={this.props.days[i].Temperature.Maximum.Value}/>)\r\n         }\r\n         return nextDays;\r\n    }else{\r\n      return (\r\n        <ForecastOutput\r\n              dayValue={'not found'}/>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        days: state.forecast.days\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Forecast);\r\n","import React, { Component } from 'react';\r\nimport * as actionCreators from '../../store/actions/actions';\r\nimport { connect } from 'react-redux';\r\nimport Search from '../../containers/Search/Search';\r\nimport WeatherTitle from '../../components/weatherTitle/weatherTitle';\r\nimport CurrentWeather from '../../containers/CurrentWeather/CurrentWeather';\r\nimport Forecast from '../../containers/Forecast/Forecast';\r\nimport _ from \"lodash\";\r\n\r\nclass HomeGrid extends Component {\r\n\r\nconstructor(props){\r\n  super(props);\r\n  this.state = {\r\n    isFavorite: false\r\n  }\r\n  this.addToFavorites = this.addToFavorites.bind(this);\r\n  this.removeFromFavorites = this.removeFromFavorites.bind(this);\r\n}\r\ncomponentWillMount(){\r\n  if (this.props.currentWeather.city === 'Tel-Aviv') {\r\n    this.props.onSearchCurrent(this.props.currentWeather.city,this.props.currentWeather.key)\r\n    this.props.onSearchForcast(this.props.currentWeather.key)\r\n  }\r\n}\r\n\r\ncomponentDidMount(){\r\n    let favs = JSON.parse(localStorage.getItem(\"favorites\"));\r\n    const fav = _.find(favs,{city:this.props.currentWeather.city});\r\n    this.setState({isFavorite:fav? true:false});\r\n}\r\n\r\ncomponentDidUpdate(prev){\r\n  if(this.props.currentWeather !== prev.currentWeather){\r\n    let favs = JSON.parse(localStorage.getItem(\"favorites\"));\r\n    const fav = _.find(favs,{city:this.props.currentWeather.city});\r\n    this.setState({isFavorite:fav? true:false});\r\n  }\r\n}\r\n\r\naddToFavorites(){\r\n      try{\r\n        let favs = JSON.parse(localStorage.getItem(\"favorites\"))\r\n        favs =  favs ? favs:[];\r\n        favs.push(this.props.currentWeather)\r\n        localStorage.setItem(\"favorites\", JSON.stringify(favs))\r\n        this.setState({isFavorite: true});\r\n      }catch(e){\r\n        alert(\"ERR insert in to favorites\")\r\n      }\r\n    }\r\n\r\nremoveFromFavorites(){\r\n      try{\r\n        let favs = JSON.parse(localStorage.getItem(\"favorites\"))\r\n        favs =  favs ? favs:[];\r\n        favs =  favs.filter((item)=>{\r\n        return item.city !==this.props.currentWeather.city;\r\n      })\r\n        localStorage.setItem(\"favorites\", JSON.stringify(favs))\r\n        this.setState({isFavorite: false});\r\n      }catch(e){\r\n        alert(\"ERR removing from favorites\")\r\n      }\r\n    }\r\n\r\n  render() {\r\n    const isFavorite = this.state.isFavorite;\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <Search />\r\n          <div className=\"row mt-5 justify-content-between\">\r\n             <CurrentWeather />\r\n                <div className=\"col-4 text-right  mt-4\">\r\n                   {!isFavorite && <button onClick={this.addToFavorites} type=\"button\" className=\"btn btn-success border 1px solid: black\">Add to favorites</button>}\r\n                   {isFavorite && <button onClick={this.removeFromFavorites} type=\"button\" className=\"btn btn-light border 1px solid: black\">Remove from favorites</button>}\r\n                 </div>\r\n           </div>\r\n           <div className=\"row mt-4 justify-content-center\">\r\n              <WeatherTitle />\r\n           </div>\r\n           <div className=\"row justify-content-between mt-4\" style={{height: '200px'}}>\r\n              <Forecast />\r\n           </div>\r\n      </div>\r\n    )}\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentWeather:state.current\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSearchCurrent: (cityName,key) => dispatch(actionCreators.getCurretWeather(cityName,key)),\r\n        onSearchForcast: (key) => dispatch(actionCreators.getForecast(key))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(HomeGrid);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actionCreators from '../../store/actions/actions';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass Favorites extends Component {\r\n\r\n// redux is not steeky\r\n  constructor(props){\r\n    super(props)\r\n     this.state = {\r\n       favorites: [],\r\n       redirect:false\r\n     }\r\n     this.updateCurrent = this.updateCurrent.bind(this)\r\n  }\r\n\r\n  updateCurrent(item){\r\n    this.setState({redirect:true});\r\n    this.props.onChangeCurrent(item.city, item.key)\r\n    this.props.onChangeForcast(item.key)\r\n  }\r\n\r\n  componentWillMount(){\r\n    const favs = JSON.parse(localStorage.getItem(\"favorites\"))\r\n    this.setState({favorites: favs})\r\n  }\r\n\r\n  render() {\r\n    const {redirect, favorites} = this.state;\r\n    if(redirect){\r\n      return     <Redirect to=\"/\"/>\r\n    }\r\n    return (\r\n            <div className=\"container mt-5\">\r\n              <ul>\r\n                 <div className=\"row\">\r\n                   {favorites.map( el => {\r\n                        return (\r\n                            <li onClick={()=>{this.updateCurrent(el)}} className=\"card bg-light mb-3 mx-1\" style={{fontSize: '20px',width:'200px' ,height: '200px',cursor: 'pointer'}}>\r\n                              <h6 className=\"card-header text-center\">{el.city}</h6>\r\n                                <div className=\"card-body\">\r\n                                 <p className=\"card-text text-center\">{el.temperature}</p>\r\n                                 <p className=\"card-text text-center\">{el.weatherText}</p>\r\n                              </div>\r\n                            </li>\r\n                          )\r\n                      })\r\n                   }\r\n                 </div>\r\n              </ul>\r\n            </div>\r\n    );}\r\n}\r\n        const mapStateToProps = state => {\r\n            return {\r\n                city: state.current.city,\r\n                temp: state.current.temperature,\r\n                weatherText: state.current.weatherText\r\n            }\r\n        };\r\n\r\n        const mapDispatchToProps = dispatch => {\r\n            return {\r\n                onChangeCurrent: (cityName,key) => dispatch(actionCreators.getCurretWeather(cityName,key)),\r\n                onChangeForcast: (key) => dispatch(actionCreators.getForecast(key))\r\n            }\r\n        };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites);\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Navigation from '../components/Navigation/Navigation';\r\nimport HomeGrid from '../containers/HomeGrid/HomeGrid';\r\nimport Favorites from '../containers/Favorites/Favorites';\r\n\r\n\r\nconst layout = (props) => (\r\n        <div className=\"container-fluid\">\r\n           <div className=\"row\">\r\n            <div className=\"col-md-12\" >\r\n              <Navigation />\r\n                <Switch>\r\n                 <Route path='/Favorites' component={Favorites} />\r\n                 <Route path='/' component={HomeGrid} />\r\n                </Switch>\r\n             </div>\r\n           </div>\r\n        </div>\r\n);\r\n\r\nexport default layout;\r\n","import React, { Component } from 'react';\nimport Layout from './Layout/Layout';\n\nclass App extends Component {\n\n    render() {\n        return (\n             <Layout />\n        );\n   }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport thunk from 'redux-thunk';\r\nimport './index.css';\r\n\r\nimport currentReducer from './store/reducers/currentReducer';\r\nimport forecastReducer from './store/reducers/forecastReducer';\r\nimport searchReducer from './store/reducers/searchReducer';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst rootReducer = combineReducers({\r\n    current: currentReducer,\r\n    forecast: forecastReducer,\r\n    search: searchReducer\r\n});\r\n\r\nconst logger = store => {\r\n    return next => {\r\n        return action => {\r\n            console.log('[Middleware] Dispatching', action);\r\n            const result = next(action);\r\n            console.log('[Middleware] next state', store.getState());\r\n            return result;\r\n        }\r\n    }\r\n};\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(logger, thunk)));\r\n\r\nReactDOM.render(<HashRouter><Provider store={store}><App /></Provider></HashRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}